{
// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/docker-existing-docker-compose
	"name": "DataEngineering",
	"dockerComposeFile": "docker-compose.yml",
	"service": "python",
	"workspaceFolder": "/${localWorkspaceFolderBasename}",


	// Uncomment to connect as an existing user other than the container default. More info: https://aka.ms/dev-containers-non-root.
	// "remoteUser": "pyuser"

	// Features to add to the dev container. More info: https://containers.dev/features.
	"features": {
		"ghcr.io/devcontainers/features/git:1": {}
	},

	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [],


	// Uncomment the next line if you want start specific services in your Docker Compose config.
	// "runServices": [],

	// Uncomment the next line if you want to keep your containers running after VS Code shuts down.
	// "shutdownAction": "none",

	// Use 'postCreateCommand' to run commands after the container is created.
	"postAttachCommand": "pre-commit install && pre-commit autoupdate",

	// Configure tool-specific properties.
	"customizations": {
		"vscode": {
			"extensions": [
				"ms-python.python",
				"ms-python.flake8",
				"ms-python.mypy-type-checker",
				"ms-python.pylint",
				"ms-python.black-formatter",
				"ms-python.isort",
				"mikoz.composite-formatter",
				"mechatroner.rainbow-csv",
				"gerda.vscode-parquet-viewer",
				"GitHub.copilot-chat"
			],
			"settings": {
				"[python]": {
					"editor.defaultFormatter": "ms-python.black-formatter",
					"editor.formatOnSave": true,
					"editor.codeActionsOnSave": {
						"source.organizeImports": "explicit"
					}
				},

				//black formatter settings
				"black-formatter.args": [
					"--line-length=88"
				],
				//isort formatter settings
				"isort.args": [
					"--profile=black",
					"--skip=.gitignore,.dockerignore,.devcontainer/",
					"--line-length=88"
				],

				//mypy linter settings
				"mypy-type-checker.args": [
					"-generated-members=pandas.*"
				],
				//"mypy-type-checker.importStrategy":"fromEnvironment",
				//flake* linter settings
				"flake8.args": [
					"--max-line-length=88"
				],
				//"pylint.importStrategy": "fromEnvironment",
				"pylint.args": ["--max-line-length=88"],
				"pylint.cwd": "${workspaceFolder}/src"
			}
		}
	}
}
